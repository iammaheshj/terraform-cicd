# Azure Pipeline that run basic continuous integration on a Terraform project

# This makes sure the pipeline is triggered every time code is pushed in the validation-testing example source, on all branches.
trigger:
  branches:
    include:
    - '*'
  paths:
    include:
    - 'samples/integration-testing/src/*'

variables:
  # There must be an Azure Service Connection with that name defined in your Azure DevOps settings. See https://docs.microsoft.com/en-us/azure/devops/pipelines/library/connect-to-azure?view=azure-devops
  #serviceConnection: 'terraform-basic-testing-azure-connection'
  serviceConnection: 'terraform-onedeliverea-subscope-connection'
  azureLocation: 'westeurope'
  # Terraform settings
  terraformWorkingDirectory: '$(System.DefaultWorkingDirectory)/samples/integration-testing/src'
  terraformVersion: '0.15.3'

stages:
  - stage: TerraformStaticCodeAnalysis
    displayName: TerraformStaticCodeAnalysis
    jobs:
    - job: TerraformStaticCodeAnalysisJob
      displayName: TerraformStaticCodeAnalysis - CI Job
      pool:
        vmImage: ubuntu-latest
      steps:
      # Step 1: run the Checkov Static Code Analysis
      - bash: $(terraformWorkingDirectory)/checkov.sh $(terraformWorkingDirectory)
        displayName: Checkov Static Code Analysis
      
  - stage: TerraformContinuousIntegration
    displayName: Terraform Module - CI
    jobs:
    - job: TerraformContinuousIntegrationJob
      displayName: TerraformContinuousIntegration - CI Job
      pool:
        vmImage: ubuntu-latest

      steps:      
      # Step 2: install Terraform on the Azure Pipelines agent
      - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
        displayName: 'Install Terraform'
        inputs:
          terraformVersion: $(terraformVersion)
      # Step 3: run Terraform init to initialize the workspace
      - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
        displayName: 'Run terraform init'
        env:
          ARM_SUBSCRIPTION_ID: $(arm-subscription-id)
          ARM_CLIENT_ID:       $(arm-client-id)
          ARM_CLIENT_SECRET:   $(arm-client-secret)
          ARM_TENANT_ID:       $(arm-tenant-id)
        inputs:
          provider: 'azurerm'
          command: 'init'
          workingDirectory: '$(terraformWorkingDirectory)'
          backendServiceArm: $(serviceConnection)
          backendAzureRmResourceGroupName: 'terraform-state-test-rg'
          backendAzureRmStorageAccountName: 'odtfstate'
          backendAzureRmContainerName: 'tfstate'
          backendAzureRmKey: 'terraform.state'
      # Step 4: run Terraform validate to validate HCL syntax
      - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
        displayName: 'Run terraform validate'
        inputs:
          provider: 'azurerm'
          command: validate
          workingDirectory: $(terraformWorkingDirectory)
      # Step 5: run Terraform plan to validate HCL syntax
      - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
        displayName: 'Run terraform plan'
        env:
          ARM_SUBSCRIPTION_ID: $(arm-subscription-id)
          ARM_CLIENT_ID:       $(arm-client-id)
          ARM_CLIENT_SECRET:   $(arm-client-secret)
          ARM_TENANT_ID:       $(arm-tenant-id)
        inputs:
          provider: 'azurerm'
          command: plan
          workingDirectory: $(terraformWorkingDirectory)
          environmentServiceNameAzureRM: $(serviceConnection)
          commandOptions: '-var location=$(azureLocation) -out tfplan  -detailed-exitcode'  
          publishPlanResults: 'terraplan'
      
      - script: |
          cd $(terraformWorkingDirectory)
          terraform show -json tfplan >> tfplan.json
          # Format tfplan.json file
          terraform show -json tfplan | jq '.' > tfplan.json
          # show only the changes
          cat tfplan.json | jq '[.resource_changes[] | {type: .type, name: .change.after.name, actions: .change.actions[]}]' 
          mkdir drop
          cp tfplan tfplan.json $(terraformWorkingDirectory)/drop/        
        env:
          ARM_SUBSCRIPTION_ID: $(arm-subscription-id)
          ARM_CLIENT_ID:       $(arm-client-id)
          ARM_CLIENT_SECRET:   $(arm-client-secret)
          ARM_TENANT_ID:       $(arm-tenant-id)
        condition: and(succeeded(), eq(variables['TERRAFORM_PLAN_HAS_CHANGES'], 'true'))
        displayName: Create tfplan.json
    
      - task: PublishBuildArtifacts@1
        displayName: Upload tfplan
        condition: and(succeeded(), eq(variables['TERRAFORM_PLAN_HAS_CHANGES'], 'true'))
        inputs:
          PathtoPublish: '$(terraformWorkingDirectory)/drop/'
          ArtifactName: 'drop'
          publishLocation: 'Container'

    - job: waitForValidationThenApplyJob
      condition: and(succeeded(), eq(variables['TERRAFORM_PLAN_HAS_CHANGES'], 'true'))
      displayName: Wait for external validation 
      dependsOn: TerraformContinuousIntegrationJob
      pool: server    
      timeoutInMinutes: 4320 # job times out in 3 days
      steps:   

      - task: ManualValidation@0
        inputs:
          notifyUsers: |
            mahesh.jadhav@capgemini.com
          instructions: 'you should validate the Terraform Plan file'
          onTimeout: 'resume'

  - stage: Terraform_apply    
    dependsOn: TerraformContinuousIntegration
    condition: and(succeeded(), eq(variables['TERRAFORM_PLAN_HAS_CHANGES'], 'true'))
    pool:
      vmImage: ubuntu-latest
    jobs:  
    - job: terraform_apply
      steps:
      
      - task: DownloadBuildArtifacts@0
        displayName: Download tfplan
        inputs:
          buildType: 'current'
          downloadType: 'specific'
          itemPattern: 'drop/tfplan'
          downloadPath: '$(terraformWorkingDirectory)'
  
      - task: CopyFiles@2
        displayName: Copy tfplan
        inputs:
          SourceFolder: '$(terraformWorkingDirectory)/drop'
          Contents: 'tfplan'
          TargetFolder: '$(terraformWorkingDirectory)'
  
      - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
        displayName: Install TF
        inputs:
          terraformVersion: $(terraformVersion)

      - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
        displayName: $ terraform init
        env:
          ARM_SUBSCRIPTION_ID: $(arm-subscription-id)
          ARM_CLIENT_ID:       $(arm-client-id)
          ARM_CLIENT_SECRET:   $(arm-client-secret)
          ARM_TENANT_ID:       $(arm-tenant-id)
        inputs:
          command: 'init'
          workingDirectory: $(terraformWorkingDirectory)
          azureLocation: $(azureLocation)
          backendServiceArm: $(serviceConnection) 
          backendAzureRmResourceGroupName: 'terraform-state-test-rg'
          backendAzureRmStorageAccountName: 'terraformstatetest'
          backendAzureRmContainerName: 'tfstate'
          backendAzureRmKey: 'terraform.state'

      - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
        displayName: $ terraform apply
        env:
          ARM_SUBSCRIPTION_ID: $(arm-subscription-id)
          ARM_CLIENT_ID:       $(arm-client-id)
          ARM_CLIENT_SECRET:   $(arm-client-secret)
          ARM_TENANT_ID:       $(arm-tenant-id)
        inputs:
          command: 'apply'
          workingDirectory: '$(terraformWorkingDirectory)'
          commandOptions: 'tfplan'
          environmentServiceNameAzureRM: $(serviceConnection) 
      
